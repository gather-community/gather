<%= gather_form_for(group, url: group.new_record? ? groups_groups_path : groups_group_path(group)) do |f| %>
  <%= f.input(:name, maxlength: Groups::Group.columns_hash["name"].limit) %>
  <% if @community_options %>
    <%= f.input(:communities) do %>
      <% @community_options.each do |community| %>
        <div class="checkbox">
          <label>
            <%= check_box_tag("groups_group[community_ids][]", community.id,
                  group.communities.include?(community)) %>
            <%= community.name %>
          </label>
        </div>
      <% end %>
    <% end %>
  <% end %>
  <%= f.input(:description, as: :text, maxlength: Groups::Group.columns_hash["description"].limit) %>
  <%= f.input(:kind, collection: Groups::Group::KINDS, include_blank: false) %>
  <%= f.input(:availability, collection: Groups::Group::AVAILABILITIES, include_blank: false) %>
  <%= nested_field_set(f, :memberships, single_row: true, inner_labels: false) %>

  <% if policy(group).change_permissions? %>
    <%= f.input(:can_request_jobs) %>
    <%= f.input(:can_administer_email_lists) %>
    <%= f.input(:can_moderate_email_lists) %>
  <% end %>

  <% if policy(group.mailman_list).edit? %>
    <h2>Email List</h2>

    <% if @domain_options.empty? %>
      You can't create an email list because there are no domains associated with this community.
      <a href="mailto:info@gather.coop">Contact Gather staff</a> to rectify this.
    <% else %>
      <%= f.simple_fields_for(:mailman_list) do |list_form| %>
        <p>
          Email lists are provided through the Mailman mailing list software.
          <% if list_form.object.new_record? %>
            Leave these fields blank if you don't need an email list for this group.
          <% else %>
            List name and domain can't be edited once the list is created. If you need to change them,
            delete and recreate the list or contact Gather staff.
          <% end %>
        </p>

        <%= list_form.input(:address) do %>
          <%= list_form.input(:name, label: false, disabled: !policy(group.mailman_list).edit_name?) %>
          <span><strong>&nbsp;@&nbsp;</strong></span>
          <%= list_form.input(:domain_id, collection: @domain_options,
                                          disabled: !policy(group.mailman_list).edit_name?,
                                          label: false, include_blank: false) %>
        <% end %>

        <div class="list-form-details hiding">
          <%= list_form.input(:managers_can_administer) %>
          <%= list_form.input(:managers_can_moderate) %>
          <%= list_form.input(:members) do %>
            List members are synchronized with Gather as follows:
            <ul>
              <li>
                <strong>Members</strong>: All members of this group are automatically sync'd to the list.
                You can manually add additional members via the
                <%= link_to("Mailman admin panel", mailman_list.panel_url) %>.
              </li>
              <li>
                <strong>Moderators</strong>: List moderators are sync'd according to the 'Managers can moderate
                list?' and 'Can moderate all email lists?' settings above. You can manually add additional
                moderators via the <%= link_to("Mailman admin panel", mailman_list.panel_url) %>.
              </li>
              <li>
                <strong>Owners</strong>: List owners are sync'd according to the 'Managers can administer list?'
                and 'Can administer all email lists?' settings above. You can manually add additional owners
                via the <%= link_to("Mailman admin panel", mailman_list.panel_url) %>.
              </li>
              <li>
                <strong>Non-members</strong>: The Mailman 'non-member' feature can be used 1) to
                allow additional addresses to send email to the list without receiving from it and 2) to
                ban people from sending to the list. Non-members do not receive email from the list.
                Non-members are not sync'd from Gather, but can be added manually via the
                <%= link_to("Mailman admin panel", mailman_list.panel_url) %>.
                See the <%= link_to("Mailman documentation",
                  "https://mailman.readthedocs.io/en/latest/src/mailman/rules/docs/moderation.html") %>
                for more information.
              </li>
            </ul>
            <strong>Only addresses not associated with Gather users should be
            adjusted via the Mailman admin panel.</strong>
            Any manual changes to memberships for Gather users will be overwritten during sync.
          <% end %>
          <%= list_form.input(:settings) do %>
            List settings can be adjusted via the
            <%= link_to("Mailman admin panel", mailman_list.panel_url) %>.
            The following settings will be forcibly reset by Gather:
            <ul>
              <li>
                <strong>Show list on index page</strong>: Lists will never be advertised
                since this is a private mailing list system only.
              </li>
              <li>
                <strong>Maximum message size</strong>: Messages are limited to 5 MiB.
              </li>
              <li>
                <strong>Subscription policy</strong>: Moderators will have to authorize any new
                subscriptions manually. The primary route for subscribing should be via Gather.
                Subscriptions via the Mailman site or via email should be rare.
              </li>
            </ul>
          <% end %>
          <%= list_form.input(:_destroy, as: :boolean) if list_form.object.persisted? %>
        </div>
      <% end %>
    <% end %>
  <% end %>

  <%= form_actions do %>
    <%= f.button :primary %>
  <% end %>
<% end %>

<%= javascript_tag do %>
  $(function() {
    new Gather.Views.Groups.GroupFormView({el: '.groups--group-form'});
    new Gather.Views.DirtyChecker({el: '.groups--group-form'});
    new Gather.Views.AjaxSelect2({
      el: '.groups--group-form',
      extraData: function() {
        <% if @community_options %>
        // Get an array of selected community IDs
        return $("[name='groups_group[community_ids][]']:checked")
          .map(function() { return this.value; }).get();
        <% else %>
          return <%= group.community_ids.to_json %>;
        <% end %>
      }
    });
  });
<% end %>
