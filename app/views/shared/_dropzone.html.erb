<%
  hide_existing = local_assigns[:hide_existing]
  attachment = obj.send(attrib)
  bg_style = if local_assigns[:format]
               path = image_path("missing/#{obj.model_name.i18n_key.to_s.pluralize}/#{format}.png")
               "background-image: url(#{path})"
             end
  wrapper_classes = ["dropzone-wrapper"]
  wrapper_classes <<
    if hide_existing || !attachment.attached? || obj.send("#{attrib}_destroy?")
      "state-empty"
    else
      "state-existing"
    end
%>
<%= content_tag(:div, class: wrapper_classes.join(" ")) do %>
  <%= form_tag(uploads_path, class: "dropzone") do %>
    <%# Use .model_name.name instead of .class.name b/c sometimes we override .model_name when using STI %>
    <%= hidden_field_tag(:class_name, obj.model_name.name) %>
    <%= hidden_field_tag(:attrib, attrib) %>

    <%# Existing image on object (may or may not be persisted as an attachment-could be just a blob.) %>
    <% if attachment.attached? %>
      <%= image_tag(obj.send("#{attrib}_variant", format), class: "existing", alt: "Image attachment") %>
    <% end %>

    <%# Drop area with the dashed border. %>
    <%= content_tag(:div, class: "dz-message", style: bg_style, data: {dz_message: ""}) do %>
      <div>
        <%= t("dropzone.prompts.models.#{obj.model_name.i18n_key}", default: :"dropzone.prompts.default") %>
      </div>
    <% end %>

    <%# Show any errors on this field that were set during create/update on the server. %>
    <%# These errors should typically not be possible since we are checking them on the dropzone upload. %>
    <% if obj.errors[attrib].any? %>
      <div class="main-request-errors error"><%= obj.errors[attrib].join(", ") %></div>
    <% end %>

    <%# The dz-preview element will be inserted here, at the end of the form tag. %>
  <% end %>
  <%= link_to(icon_tag("trash"), "#", class: "delete") %>
<% end %>
