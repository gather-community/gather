# Default values for gather.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""

app:
  enabled: true
  image:
    registry: ""
    repository: gather
    pullPolicy: IfNotPresent
    tag: latest
  ## Configure the ingress resource that allows you to access Gather
  ## ref: https://kubernetes.io/docs/user-guide/ingress/
  ingress:
    ## @param app.ingress.enabled Enable ingress resource for Management console
    enabled: false
    ## @param app.ingress.path Path for the default host. You may need to set this to '/*' in order to use this with ALB ingress controllers.
    path: /
    ## @param app.ingress.pathType Ingress path type
    pathType: ImplementationSpecific
    ## @param app.ingress.hostname Default host for the ingress resource
    hostname: gather-app.local
    ## @param app.ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ##
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    annotations: {}
    ## @param app.ingress.tls Enable TLS configuration for the hostname defined at `app.ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.app.ingress.hostname }}
    ## You can:
    ##   - Use the `app.ingress.secrets` parameter to create this TLS secret
    ##   - Rely on cert-manager to create it by setting the corresponding annotations
    ##   - Rely on Helm to create self-signed certificates by setting `app.ingress.selfSigned=true`
    tls: false
    ## @param app.ingress.selfSigned Set this to true in order to create a TLS secret for this ingress record
    ## using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param app.ingress.extraHosts The list of additional hostnames to be covered with this ingress record.
    ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
    ## e.g:
    ## extraHosts:
    ##   - name: gather-app.local
    ##     path: /
    extraHosts: []
    ## @param app.ingress.extraPaths An array with additional arbitrary paths that may need to be added to the ingress under the main host
    ## e.g:
    ## extraPaths:
    ## - path: /*
    ##   backend:
    ##     serviceName: ssl-redirect
    ##     servicePort: use-annotation
    extraPaths: []
    ## @param app.ingress.extraRules The list of additional rules to be added to this ingress record. Evaluated as a template
    ## Useful when looking for additional customization, such as using different backend
    extraRules: []
    ## @param app.ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
    ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## e.g:
    ## extraTls:
    ##   - hosts:
    ##       - gather-app.local
    ##     secretName: gather-app.local-tls
    extraTls: []
    ## @param app.ingress.secrets Custom TLS certificates as secrets
    ## NOTE: 'key' and 'certificate' are expected in PEM format
    ## NOTE: 'name' should line up with a 'secretName' set further up
    ## If it is not set and you're using cert-manager, this is unneeded, as it will create a secret for you with valid certificates
    ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created valid for 365 days
    ## It is also possible to create and manage the certificates outside of this helm chart
    ## Please see README.md for more information
    secrets: []
    ## @param app.ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
    ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
    ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
    ingressClassName: ""
    ## @param app.ingress.existingSecret It is your own the certificate as secret.
    existingSecret: ""


postgresql:
  enabled: true
  auth:
    username: dev
    password: dev
    database: dev
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 16.1.0-debian-11-r15
    pullPolicy: IfNotPresent
  architecture: standalone
  primary:
    persistence:
      enabled: false
  tls:
    enabled: false

redis:
  enabled: true
  auth:
    enabled: false
    password: ""
  architecture: standalone
  image:
    registry: docker.io
    repository: bitnami/redis
    tag: 6.2.14-debian-11-r2
    pullPolicy: IfNotPresent

elasticsearch:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/elasticsearch
    tag: 8.11.3-debian-11-r0
  security:
    enabled: false
  # Deploy ES as a single node
  master:
    masterOnly: false
    replicaCount: 1
  data:
    replicaCount: 0
  coordinating:
    replicaCount: 0
  ingest:
    replicaCount: 0


